import Link from 'next/link';
import Layout from '../../components/Layout.js';
import { useRouter } from 'next/router';
import UserContext from '../../components/UserContext.js';
import React, { useContext, useState, useEffect } from 'react';
import supabase from "@/components/supabaseClient";



/**
 * Renders the article page with the given article, comments, and like count.
 * Allows users to like and comment the article if they are logged in.
 * Allows the author of the article to edit and delete it, the button to do so is only displayed if the user is logged in and is the author of the article.
 * 
 * @param {Object} props - The component props.
 * @param {Object} props.article - The article object.
 * @param {Array} props.comments - The array of comments.
 * @param {number} props.likeCount - The number of likes for the article.
 * @returns {JSX.Element} The rendered article page.
 */
export default function ArticlePage({ article, comments, likeCount }) {
  const router = useRouter();
  const { user } = useContext(UserContext);
  const userId = user?.id;
  const [hasLiked, setHasLiked] = useState(false);
  const [currentLikeCount, setCurrentLikeCount] = useState(likeCount);


  // function to delete an article
  const handleDelete = async () => {
    if (window.confirm('Are you sure you want to delete this article?')) {
      const { error } = await supabase
        .from('articles')
        .delete()
        .match({ id: article.id });

      if (error) {
        console.error('Error deleting article:', error);
      } else {
        router.push('/articles'); // go back to the articles page after deleting
      }
    }
  };

  // function to edit an article and redirect to the edit page
  const handleEdit = () => {
    router.push(`/edit-article/${article.id}`);
  };

  // function to write a new comment and redirect to the new comment page with the article id as a parameter
  const handleWriteCommentClick = () => {
    if (user) {
      router.push(`/new-comment/${article.id}`);
    } else {
      alert('Please log in to write a comment.');
    }
  };

  // Function to delete a comment when the user clicks on the delete button 
  const handleDeleteComment = async (commentId) => {
    if (window.confirm('Are you sure you want to delete this comment?')) {

      // Delete the comment from the database
      const { error } = await supabase
        .from('comments')
        .delete()
        .match({ id: commentId });

      if (error) {
        console.error('Error deleting comment:', error);
      } else {
        // Refresh the comments or page to reflect the deletion
        router.replace(router.asPath);
      }
    }
  };

  // Check if the user has already liked the article when the page loads to display the correct liek or unlike button
  useEffect(() => {
    const checkIfLiked = async () => {
      if (user) {

        // Check if the user has already liked the article in the database
        const { data, error } = await supabase
          .from('likes')
          .select('*')
          .match({ article: article.id, author: userId })
          .single();

        if (data) setHasLiked(true);
      }
    };

    checkIfLiked();
  }, [user, article.id, userId]);

  // Function to handle liking an article if the user is not logged in, display an message to ask the user to log in
  const handleLike = async () => {
    if (!user) {
      alert('Please log in to like the article.');
      return;
    }

    if (!hasLiked) {

      // Insert the like in the database in the public table 'likes' with the article id and the user id as foreign keys
      const { error } = await supabase
        .from('likes')
        .insert([{ article: article.id, author: userId }]);

      if (!error) { 
        setHasLiked(true); // Update like state
        setCurrentLikeCount(currentLikeCount + 1); // Update like count state
      }
    }
  };

  // Function to handle unliking an article 
  const handleUnlike = async () => {
    if (user && hasLiked) {

      // Delete the like from the database
      const { error } = await supabase
        .from('likes')
        .delete()
        .match({ article: article.id, author: userId });

      if (!error) {
        setHasLiked(false); // Update like state
        setCurrentLikeCount(currentLikeCount - 1); // Update like count state
      }
    }
  };


  return (
    <Layout

      title={article.title || ' '}
      description="Generated by create next app"
    >
      <div className="in-main">
        <div className="flex justify-between">
          <div className="back-to-articles">
            <Link href="/articles">
              <button>
                ‚Üê Back
              </button>
            </Link>
          </div>
          <div>
            {hasLiked ? (
              <button onClick={handleUnlike} className="unlike-button">
                üëé
              </button>
            ) : (
              <button onClick={handleLike} className="like-button">
                üëç
              </button>

            )}
            <p className="dark:text-white">{currentLikeCount} Likes</p>
          </div>

        </div>

        <div className="">
          <h1 className='wt-title'>{article.title || ' '}</h1>
          <p className="article-info2">
            {article.author ? `Written by ${article.author.username}` : ' '}
            {article.created_at ? ` - ${new Date(article.created_at).toLocaleDateString()}` : ' '}
          </p>
          <div className="flex justify-center">
            {article.image_url && (
              <img src={article.image_url} alt={article.title} className="article-image" />

            )}
          </div>

          <div className="div-article-content">
            <div className="article-content">
              {article.message || ' '} {/* replace null by a blank if there is no content */}
            </div>
          </div>
        </div>
        <div className="div-class-edit">
          {user && userId === article.author.id && (
            <>
              <button onClick={handleEdit} className="edit-article-button">
                ‚úç Edit
              </button>
              <button onClick={handleDelete} className="delete-article-button">
                ‚úñ Delete
              </button>
            </>
          )}

        </div>

        <div className="comment-section">
          <button onClick={handleWriteCommentClick} className="write-comment-button">
            Write a Comment
          </button>
          <h2 className="comment-name-section">Comments ({comments.length}):</h2>

          {comments.map(comment => (
            <div key={comment.id} className="comment">
              <div className="flex items centers justify-between">

                <p className="comment-author">{comment.author ? `${comment.author.username}` : 'Unknown'}</p>
                {user && userId === comment.author.id && (
                  <button onClick={() => handleDeleteComment(comment.id)} className="delete-comment-button">
                    ‚úñ
                  </button>
                )}
              </div>
              <p className="comment-message">{comment.message}</p>

            </div>
          ))}
        </div>

      </div>
    </Layout>
  )
}

// Fetch the article, comments, and like count for the article
export async function getServerSideProps(ctx) {
  const { id } = ctx.params;

  // Fetch article in the database that matches the id
  const { data: article, error: articleError } = await supabase
    .from('articles')
    .select(`
      *,
      author:profiles (
        username,
        id
      )
    `)
    .eq('id', id)
    .single();

  // Fetch comments for the article in the database that matches the article id
  const { data: comments, error: commentsError } = await supabase
    .from('comments')
    .select(`
      id,
      message,
      created_at,
      author:profiles (
        username,
        id
      )
    `)
    .eq('article', id);

  // Fetch like count for the article in the database that matches the article id
  const { data: likeCount, error: likeCountError } = await supabase
    .from('likes')
    .select('*', { count: 'exact' })
    .eq('article', id);

  if (articleError) {
    console.error('Error fetching article:', articleError);
  }

  if (commentsError) {
    console.error('Error fetching comments:', commentsError);
  }

  if (likeCountError) {
    console.error('Error counting likes:', likeCountError);
  }

  return {
    props: {
      article: article || {}, // return an empty object if there is no article
      comments: comments || [], // return an empty array if there are no comments
      likeCount: likeCount.length || 0 // return 0 if there are no likes
    }
  };
}



