import React, { useEffect, useState, useContext } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import Layout from '../components/Layout.js';
import UserContext from '../components/UserContext';
import { createClient } from '@supabase/supabase-js';
import "slick-carousel/slick/slick.css"; 
import "slick-carousel/slick/slick-theme.css";
import Slider from "react-slick";
import supabase from "@/components/supabaseClient";

export default function Page({ articles, topLikedArticles }) {
    const [search, setSearch] = useState('');
    const router = useRouter();

    // Handles the search form submission
    const handleSearch = async (e) => {
        e.preventDefault();
        // Redirects to the same page with the search query
        router.push(`/?search=${search}`);
    };

    const settings = {
        dots: true,
        infinite: true,
        speed: 500,
        slidesToShow: 1,
        slidesToScroll: 1,
        autoplay: true,
        autoplaySpeed: 3500,
      };
      
    useEffect(() => {
    const toggleSwitch = document.querySelector('input[type="checkbox"].theme-switch');

    if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme:dark)').matches)) {
        document.documentElement.classList.add('dark');
        if (toggleSwitch) {
        toggleSwitch.checked = true;
        }
    } else {
        document.documentElement.classList.remove('dark');
        if (toggleSwitch) {
        toggleSwitch.checked = false;
        }
    }

    function switchTheme(e) {
        if (e.target.checked) {
        localStorage.setItem('theme', 'dark');
        document.documentElement.classList.add('dark');
        } else {
        localStorage.setItem('theme', 'light');
        document.documentElement.classList.remove('dark');
        }
    }

    if (toggleSwitch) {
        toggleSwitch.addEventListener('change', switchTheme, false);
    }

    // Cleanup event listener on component unmount
    return () => {
        if (toggleSwitch) {
        toggleSwitch.removeEventListener('change', switchTheme, false);
        }
    };
    }, []);
    return (
        <Layout title="HomePage" description="Generated by create next app">
            <div className="main">
                <div className="flex justify-end mr-44">
                    <div class="flex items-center z-30">
                        <svg class="h-6 w-6 mr-2 text-yellow-300 dark:text-gray-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"/>
                        </svg>
                        <div class="relative inline-block w-10 select-none">
                        <input type="checkbox" name="toggleTheme" id="toggleTheme" class="transition-transform transform translate-x-0 duration-500 theme-switch absolute block w-5 h-5 rounded-full bg-white appearance-none cursor-pointer mx-1 my-1"/>
                        <label for="toggleTheme" class="theme-switch-label block overflow-hidden w-14 h-7 rounded-full bg-yellow-300 cursor-pointer"></label>
                        </div>
                        <svg class="h-6 w-6 ml-6 text-gray-900 dark:text-yellow-100" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"/>
                        </svg>
                    </div>
                </div>
                <h1 className="wt-title">Welcome to Ferrari News website</h1>
                <p className="wt-text">&quot;Passione e potenza italiane dall&apos;inizio alla fine.&quot; E.Ferrari </p>

               
                {/* Displaying the search bar */}
                <form onSubmit={handleSearch}>
                    <input
                        type="text"
                        value={search}
                        onChange={(e) => setSearch(e.target.value)}
                        placeholder="Search articles..."
                    />
                    <button type="submit" className="mb-10">Search</button>
                </form>



                {/* Displaying the list of articles or a message if no articles are found */}
                {articles.length > 0 ? (
                    <ul className="">
                        {articles.map(article => (
                            <li key={article.id} className="w-1/2 mx-auto">
                                <Link href={`/articles/${article.id}`}>
                                    <div className="result-search-article">
                                        {/* Link to the individual article */}
                                        <p>{article.title}</p>
                                        
                                    </div>
                                </Link>
                            </li>
                            
                            
                            
                        ))}
                    </ul>
                ) : (
                    <p className="text-center dark:text-white">No articles found.</p>
                )}

                {/* Affichage des 3 articles les plus likés */}
                <div className="my-8 mx-auto w-3/4">
                    <h2 className="text-2xl font-semibold mb-4 text-center dark:text-white">Top Liked Articles</h2>
                    {topLikedArticles.length > 0 ? (
                        <Slider {...settings}>
                            {topLikedArticles.map((article) => (
                                <div key={article.id} className="flex justify-center">
                                    <Link href={`/articles/${article.id}`}>
                                        <div className="cursor-pointer block rounded-lg overflow-hidden shadow-lg bg-white max-w-2xl mx-auto dark:bg-white">
                                            <img
                                                src={article.image_url}
                                                alt={article.title}
                                                className="w-full h-80 object-cover"
                                            />
                                            <p className="p-4 text-lg font-medium text-center dark:bg-gray-800 dark:text-white">{article.title}</p>
                                        </div>
                                    </Link>
                                </div>
                            ))}
                        </Slider>
                    ) : (
                        <p className="wt-text">No top liked articles found.</p>
                    )}
                </div>

            </div>
        </Layout>
    );
}

export async function getServerSideProps({ query }) {
    const searchTerm = query.search || '';
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
    const supabase = createClient(supabaseUrl, supabaseKey);

    let articlesData = [];
    let topLikedArticles = [];
    let error = null;

    // Récupérer les 3 articles les plus likés
    try {
        const { data: topArticles, error: topArticlesError } = await supabase
            .rpc('top_liked_articles') // Utilisez une fonction stockée ou une vue si possible

        if (topArticlesError) throw topArticlesError;

        topLikedArticles = topArticles;
    } catch (e) {
        error = e;
    }

    
    if (searchTerm) {
        const formattedSearchTerm = searchTerm.split(' ').join(' | ');
        const response = await supabase
            .from('articles')
            .select('*, author:profiles (firstname, lastname)')
            .filter('textsearchable_index_col', 'fts', formattedSearchTerm)
            .order('created_at', { ascending: false });

        articlesData = response.data;
        error = response.error || error;
    }

    return {
        props: {
            articles: articlesData,
            topLikedArticles: topLikedArticles,
            error: error
        }
    };
}

